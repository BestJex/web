package com.callke8.call.calltask;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.callke8.call.calltelephone.CallTelephone;
import com.callke8.utils.ArrayUtils;
import com.callke8.utils.BlankUtils;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Model;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;

@SuppressWarnings("serial")
public class CallTask extends Model<CallTask> {
	
	public static CallTask dao = new CallTask();
	
	/**
	 * 新增外呼任务
	 * @param callTask
	 * @return
	 */
	public int add(Record callTask) {
		
		int id = 0;
		boolean b = Db.save("call_task", "CT_ID", callTask);
		
		if(b) {
			id = Integer.valueOf(callTask.get("CT_ID").toString());
		}
		
		return id;
	}
	
	
	/**
	 * 修改
	 * 
	 * @param ct
	 * @return
	 */
	public boolean update(CallTask ct) {
		boolean b = false;
		int ctId = Integer.valueOf(ct.get("CT_ID").toString());
		String taskName = ct.get("TASK_NAME").toString();
		String callerId = ct.get("CALLERID").toString();
		
		String sql = "update call_task set TASK_NAME=?,CALLERID=? where CT_ID=?";
		
		int count = Db.update(sql, taskName,callerId,ctId);
		
		if(count>0){   //修改数量大于0时
			b = true;
		}
		
		return b;
	}
	
	/**
	 * 根据传入的任务id, 及状态值，修改任务的状态
	 * 
	 * @param taskId
	 * @param state
	 * @return
	 */
	public boolean updateState(String taskId,String state) {
		boolean b = false;
		String sql = "update call_task set TASK_STATE=? where CT_ID=?";
		
		int count = Db.update(sql, state,taskId);
		
		if(count>0) {
			b = true;
		}
		return b;
	}
	
	/**
	 * 根据任务ID,返回任务的状态
	 * 
	 * @param taskId
	 * @return
	 */
	public String getTaskStateByTaskId(String taskId) {
		
		String sql = "select TASK_STATE from call_task where CT_ID=?";
		
		Record record = Db.findFirst(sql, taskId);
		
		if(BlankUtils.isBlank(record)) {
			return null;
		}
		
		return record.get("TASK_STATE");
		
	}
	
	/**
	 * 根据任务ID，增加的数量，及类型,增加相应字段的数量
	 * 
	 * @param taskId
	 * @param count
	 * @param type
	 * 			0:表示增加号码总数的量; 1:表示增加已经分配的量;  2：表示增加已经呼叫成功的量； 3 表示增加呼叫失败的量
	 * @return
	 */
	public boolean addtoTaskCountByType(String taskId,int count,int type) {
		boolean b = false;
		String sql = null;
		if(type==0) {
		    sql = "update call_task set TELEPHONE_COUNT=(TELEPHONE_COUNT+?) where CT_ID=?";
		}else if(type==1) {
			sql = "update call_task set DISTRIBUTE_COUNT=(DISTRIBUTE_COUNT+?) where CT_ID=?";
		}else if(type==2) {
			sql = "update call_task set SUCCESS_COUNT=(SUCCESS_COUNT+?) where CT_ID=?";
		}else if(type==3) {
			sql = "update call_task set FAILURE_COUNT=(FAILURE_COUNT+?) where CT_ID=?";
		}
		
		int countRs = Db.update(sql, count,taskId);
		
		if(countRs>0) {
			b = true;
		}
		return b;
	}
	
	/**
	 * 减少任务的号码总数，主要是用于删除任务的号码时，重新更改任务的号码总量
	 * 			
	 * @param taskId
	 * @param count
	 * @return
	 */
	public boolean reduceTaskCount(String taskId,int count) {
		boolean b = false;
		String sql = "update call_task set TELEPHONE_COUNT=(TELEPHONE_COUNT-?) where CT_ID=?";
		
		int countRs = Db.update(sql, count,taskId);
		
		if(countRs>0) {
			b = true;
		}
		return b;
	}
	
	/**
	 * 根据任务ID，返回当前任务中已经呼叫成功或失败的数量
	 * 
	 * @param taskId
	 * @param type
	 * 			类型:   2 表示成功的数量; 3表示失败数量
	 * @return
	 */
	public int getSuccessFailureCountByTaskId(String taskId,String type) {
		
		String sql = "select count(*) as count from call_telephone where CT_ID=? and STATE=?";
		
		Record record = Db.findFirst(sql, taskId,type);
		
		int count = Integer.valueOf(record.get("count").toString());
		
		return count;
	}
	
	/**
	 * 根据当前任务被删除的号码成功数，重新更新任务的数量情况
	 * 
	 * @param taskId
	 * @param count
	 * @param distributeCount
	 * @param successCount
	 * @param failureCount
	 * @return
	 */
	public boolean refreshTaskCountByDelTelephone(String taskId,int count,int distributeCount,int successCount,int failureCount) {
		
		//更改号码总量
		reduceTaskCount(taskId, count);      //号码的总量已经计算完成
		
		
		//更新已经分配、成功及失败的数量，即从原来的数量上减少传的数量
		//当这里还可以作一下判断，如果三个数都为 0 时，则无需执行以下的方法了。
		boolean b = false;
		if(!(distributeCount==0&&successCount==0&&failureCount==0)) {   //如果三个数不同时为 0 时，则需要执行以下方法
			b = reduceSuccessFailureCount(taskId, distributeCount,successCount, failureCount);
		}
		
		return b;
	}
	
	/**
	 * 减少已经分配数量，成功数量，失败数量
	 * 
	 * @param taskId
	 * @param distributeCount
	 * @param successCount
	 * @param failureCount
	 * @return
	 */
	public boolean reduceSuccessFailureCount(String taskId,int distributeCount,int successCount,int failureCount) {
		boolean b = false;
		
		String sql = "update call_task set DISTRIBUTE_COUNT=(DISTRIBUTE_COUNT-?),SUCCESS_COUNT=(SUCCESS_COUNT-?),FAILURE_COUNT=(FAILURE_COUNT-?) where CT_ID=?";
		
		int count = Db.update(sql, distributeCount,successCount,failureCount,taskId);
		
		if(count>0) {
			b = true;
		}
		
		return b;
	}
	
	/**
	 * 根据 taskId 删除外呼任务
	 * @param taskId
	 * @return
	 */
	public boolean delete(String taskId) {
		boolean b = false;
		//先删除当前任务的号码
		int count = CallTelephone.dao.deleteByTaskId(taskId);
		
		System.out.println("删除任务 " + taskId + " 共删除任务号码数量：" + count);
		
		String sql = "delete from call_task where CT_ID=?";
		int count2 = Db.update(sql,taskId);
		
		if(count2>0) {
			b = true;
		}
		
		return b;
	}
	
	/**
	 * 根据条件查询分页
	 * @param currentPage
	 * @param numPerPage
	 * @param taskName
	 * @param taskType
	 * @param taskState
	 * @param startTime
	 * @param endTime
	 * @return
	 */
	public Page<Record> getCallTaskByPaginate(int currentPage,int numPerPage,String taskName,String taskType,String taskState,String startTime,String endTime) {
		
		StringBuilder sb = new StringBuilder();
		Object[] pars = new Object[5];
		int index = 0;
		
		sb.append("from call_task where 1=1");
		
		if(!BlankUtils.isBlank(taskName)) {
			sb.append(" and TASK_NAME like ?");
			pars[index] = "%" + taskName + "%";
			index++;
		}
		
		if(!BlankUtils.isBlank(taskType)) {
			sb.append(" and TASK_TYPE=?");
			pars[index] = taskType;
			index++;
		}
		
		if(!BlankUtils.isBlank(taskState) && !taskState.equalsIgnoreCase("5")) {
			sb.append(" and TASK_STATE=?");
			pars[index] = taskState;
			index++;
		}
		
		if(!BlankUtils.isBlank(startTime)) {
			sb.append(" and CREATE_TIME>=?");
			pars[index] = startTime + " 00:00:00";
			index++;
		}
		
		if(!BlankUtils.isBlank(endTime)) {
			sb.append(" and CREATE_TIME<=?");
			pars[index] = endTime + " 23:59:59";
			index++;
		}
		
		Page<Record> page = Db.paginate(currentPage, numPerPage, "select *", sb.toString() + " ORDER BY CREATE_TIME DESC", ArrayUtils.copyArray(index, pars));
		
		return page;
	}
	
	/**
	 * 根据条件查询分页，并转为 Map 
	 * @param currentPage
	 * @param numPerPage
	 * @param taskName
	 * @param taskType
	 * @param taskState
	 * @param startTime
	 * @param endTime
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public Map getCallTaskByPaginateToMap(int currentPage,int numPerPage,String taskName,String taskType,String taskState,String startTime,String endTime){
		
		Page<Record> page = getCallTaskByPaginate(currentPage,numPerPage,taskName,taskType,taskState,startTime,endTime);
		
		int total = page.getTotalRow();
		
		Map m = new HashMap();
		m.put("total", total);
		m.put("rows", page.getList());
		
		return m;
	}
	
	/**
	 * 根据当前登录的工号的授权情况显示外呼任务
	 * 
	 * @param currentPage
	 * @param numPerPage
	 * @param taskName
	 * @param taskType
	 * @param taskState
	 * @param startTime
	 * @param endTime
	 * @param operId
	 * 			当前登录的工号
	 * @return
	 */
	public Map getCallTaskByPaginateToMap4Auth(int currentPage,int numPerPage,String taskName,String taskType,String taskState,String startTime,String endTime,String operId) {
		Page<Record> page = getCallTaskByPaginate4Auth(currentPage,numPerPage,taskName,taskType,taskState,startTime,endTime,operId);
		
		int total = page.getTotalRow();
		
		Map m = new HashMap();
		m.put("total", total);
		m.put("rows", page.getList());
		
		return m;
	}
	
	
	
	
	
	
	
	/**
	 * 根据条件查询分页
	 * @param currentPage
	 * @param numPerPage
	 * @param taskName
	 * @param taskType
	 * @param taskState
	 * @param startTime
	 * @param endTime
	 * @param operId
	 * 			当前登录的工号
	 * @return
	 */
	public Page<Record> getCallTaskByPaginate4Auth(int currentPage,int numPerPage,String taskName,String taskType,String taskState,String startTime,String endTime,String operId) {
		
		StringBuilder sb = new StringBuilder();
		Object[] pars = new Object[6];
		int index = 0;
		sb.append("from call_task where 1=1");
		
		sb.append(" and CT_ID in(" + getTaskIdByOperId(operId) + ")");
		
		if(!BlankUtils.isBlank(taskName)) {
			sb.append(" and TASK_NAME like ?");
			pars[index] = "%" + taskName + "%";
			index++;
		}
		
		if(!BlankUtils.isBlank(taskType)) {
			sb.append(" and TASK_TYPE=?");
			pars[index] = taskType;
			index++;
		}
		
		if(!BlankUtils.isBlank(taskState) && !taskState.equalsIgnoreCase("5")) {
			sb.append(" and TASK_STATE=?");
			pars[index] = taskState;
			index++;
		}
		
		if(!BlankUtils.isBlank(startTime)) {
			sb.append(" and CREATE_TIME>=?");
			pars[index] = startTime + " 00:00:00";
			index++;
		}
		
		if(!BlankUtils.isBlank(endTime)) {
			sb.append(" and CREATE_TIME<=?");
			pars[index] = endTime + " 23:59:59";
			index++;
		}
		
		Page<Record> page = Db.paginate(currentPage, numPerPage, "select *", sb.toString() + " ORDER BY CREATE_TIME DESC", ArrayUtils.copyArray(index, pars));
		
		return page;
	}
	
	/**
	 * 根据当前登录的工号，查询已经授权的任务ID，并拼接成字符串返回
	 * 
	 * @param operId
	 * @return
	 */
	public String getTaskIdByOperId(String operId) {
		
		String ids = "";
		
		List<Record> list = CallTaskAuth.dao.getCallTaskAuthByOperId(operId);
		
		for(Record r:list) {
			ids += r.get("CT_ID") + ",";
		}
		
		//最后，要将最后一个逗号去掉
		if(!BlankUtils.isBlank(ids)) {
			ids = ids.substring(0,ids.length()-1);
		}
		
		return ids;
	}
	
	
}
