package com.callke8.common;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import net.sf.json.JSONArray;

import com.callke8.system.loginlog.LoginLog;
import com.callke8.system.operator.Operator;
import com.callke8.utils.BlankUtils;
import com.callke8.utils.DateFormatUtils;
import com.callke8.utils.Md5Utils;
import com.callke8.utils.MemoryVariableUtil;
import com.callke8.utils.RenderJson;
import com.callke8.utils.TreeJson;
import com.jfinal.aop.ClearInterceptor;
import com.jfinal.core.Controller;
import com.jfinal.kit.PathKit;
import com.jfinal.plugin.activerecord.Record;

@ClearInterceptor
public class CommonController extends Controller {
	
	public void index() {
		if(BlankUtils.isBlank(getSession().getAttribute("currOperId"))) {
			//render("login.jsp");
			redirect("/login");
		}else {
			render("index.jsp");
		}
	}
	
	/**
	 * 扫描当前座席的来电信息，用于弹屏
	 */
	public void scan() {
		String agentNumber = null;    //定义一个座席号码
		
		if(!BlankUtils.isBlank(getSession().getAttribute("currCallNumber"))){
			agentNumber = getSession().getAttribute("currCallNumber").toString();
		}
		
		//如果当前登录账号未关联座席号码时，则返回空值
		if(BlankUtils.isBlank(agentNumber)) {    
			renderJson("");
			return;
		}
		
		//
		
		
	}
	
	public void login() {
		render("login.jsp");
	}
	
	public void doLogin() {
		
		String operId = getPara("operId");
		String password = getPara("password");
		String callNumber = getPara("callNumber");
		
		//
		if(!BlankUtils.isBlank(operId)&& !BlankUtils.isBlank(password)) {
			//先根据传入的 operId，将操作员信息查询出来
			Operator operator = Operator.dao.getOperatorByOperId(operId);
			
			if(BlankUtils.isBlank(operator)) {    //先判断查询结果是否为空
				render(RenderJson.error("工号不存在!"));
				return;
			}
			
			//先将 password 先进行 md5 加密
			String password2Md5 = Md5Utils.Md5(password);
			
			//判断密码是否相等
			if(!password2Md5.equalsIgnoreCase(operator.get("PASSWORD").toString())) {
				render(RenderJson.error("用户名或密码不正确!"));
			}else {
				//登录正确
				getSession().setAttribute("currOperId",operId);
				getSession().setAttribute("currCallNumber",callNumber);
				getSession().setAttribute("currOperName",operator.get("OPER_NAME").toString());
				
				//登录成功时，写入登录日志
				Record loginLog = new Record();
				loginLog.set("OPER_ID", operId);
				loginLog.set("ORG_CODE",operator.get("ORG_CODE").toString());
				loginLog.set("LOGIN_TIME",DateFormatUtils.getCurrentDate());
				loginLog.set("IP_ADDRESS", getRequest().getRemoteAddr());
				
				int logId = LoginLog.dao.add(loginLog);   //添加日志，并返回Id
				System.out.print("登录结果：" + operId + " 登录成功，");
				System.out.println("登录日志ID为:" + logId);
				if(logId>0) {   
					getSession().setAttribute("logId", logId);
				}
				
				render(RenderJson.success("登录成功!"));
			}
		}else {
			render(RenderJson.error("用户名或密码为空!"));
		}
	}
	
	/**
	 * 注销用户
	 */
	public void logout() {
		System.out.println("准备注销用户:" + getSession().getAttribute("currOperId"));
		//System.out.println(getSession().getAttribute("currOperId"));
		//System.out.println(getSession().getAttribute("currOperName"));
		//System.out.println(getSession().getAttribute("currCallNumber"));
		//System.out.println(getSession().getAttribute("logId"));
		
		//同时，要修改退出登录的日志，修改其退出时间为
		if(!BlankUtils.isBlank(getSession().getAttribute("logId"))) {
			int logId = Integer.valueOf(getSession().getAttribute("logId").toString());
			LoginLog.dao.update(logId);
		}
		
		//将 session 删除即可
		getSession().removeAttribute("currOperId");
		getSession().removeAttribute("currOperName");
		getSession().removeAttribute("currCallNumber");
		getSession().removeAttribute("logId");
		
		//render(RenderJson.success("注销成功"));
		forwardAction("/index");
	}
	
	/**
	 * 根据传递上来的数据字典组编码及数据字典项编码，取得数据字典项名称
	 * 
	 * 主要是用于在 combobox 及显示数据时，显示正确的文字结果
	 * 
	 */
	public void getDictName() {
		
		String dictNameRs = null;   //定义返回的结果
		
		String groupCodeP = getPara("groupCode");
		String dictCodeP = getPara("dictCode");
		
		List<Record> list = MemoryVariableUtil.dictMap.get(groupCodeP);
		
		for(Record record:list) {
			String dictCode = record.get("DICT_CODE");
			String dictName = record.get("DICT_NAME");
			
			if(dictCode.equalsIgnoreCase(dictCodeP)) {    //如果两者相同时，则返回数据字典项名称
				dictNameRs = dictName;
				break;
			}
		}
		render(RenderJson.success(dictNameRs));
	}
	
	/**
	 * 公共工具类：根据数据字典的 groupCode 取得radio并返回
	 */
	@SuppressWarnings("unchecked")
	public void getRadio() {
		StringBuilder sb = new StringBuilder();
		String groupCode = getPara("groupCode");
		List<Record> list = MemoryVariableUtil.dictMap.get(groupCode);
		int i = 0;
		for(Record record:list) {
			String idInfo = groupCode + i;
			String value = record.get("DICT_CODE");
			String name = record.get("DICT_NAME");
			
			sb.append("<input type='radio' name='" + groupCode + "' id='" + idInfo + "' value='" + value + "'/><label for='" + idInfo +"'>" + name + "</label>&nbsp;&nbsp;&nbsp;");
			i++;
		}
		
		System.out.println("radio信息：" + sb.toString());
		render(RenderJson.success(sb.toString()));
	}
	
	/**
	 * 公共工具类：根据数据字典的 group　取得 combobox并返回
	 */
	public void getCombobox() {
		
		StringBuilder sb = new StringBuilder();
		
		String groupCode = getPara("groupCode");
		String flag = getPara("flag");             //如果 flag为1时，则需要加入　"请选择"
		
		List<Record> list = MemoryVariableUtil.dictMap.get(groupCode);
		
		List<TreeJson> tjs = new ArrayList<TreeJson>();   //定义一个TreeJson 的 list
		if(!BlankUtils.isBlank(flag) && flag.equalsIgnoreCase("1")) {
			TreeJson defalutTj = new TreeJson();
			defalutTj.setId("");
			defalutTj.setText("请选择");
			
			tjs.add(defalutTj);
			
		}
		
		for(Record record:list) {
			TreeJson tj = new TreeJson();
			
			tj.setId(record.get("DICT_CODE").toString());
			tj.setText(record.get("DICT_NAME").toString());
			
			tjs.add(tj);
			
		}
		
		JSONArray jsonArray = JSONArray.fromObject(tjs);
		
		//System.out.println("JsonArray----:" + jsonArray.toString());
		
		renderJson(jsonArray.toString());
	}
	
}
