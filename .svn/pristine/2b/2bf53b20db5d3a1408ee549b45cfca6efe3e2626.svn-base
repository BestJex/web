package com.callke8.call.calltask;

import com.callke8.utils.BlankUtils;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Model;
import com.jfinal.plugin.activerecord.Record;

/**
 * 外呼任务的计数器，主要是用于计算各种状态的数量进行计算
 * 
 * @author Administrator
 *
 */
@SuppressWarnings("serial")
public class CallTaskCounter extends Model<CallTaskCounter> {
	
	public static CallTaskCounter dao = new CallTaskCounter();
	
	public static final int UPGRADE_ONE = 0;   	//增加一个
	public static final int REDUCE_ONE = 1;		//减少一个
	
	/**
	 * 更改任务计数器的数量，运算的规则取决于 type　的情况
	 * 
	 * @param taskId
	 * 			任务Id
	 * @param callState
	 * 			呼叫状态
	 * @param type
	 * 			UPDATE_ONE表示增加1个  REDUCE_ONE表示减少1个
	 * @return
	 */
	public boolean  update(int taskId,String callState,int type) {
		
		boolean b = false;
		
		Record callTaskCounter = checkRecord(taskId,callState);   //先检查，当前是否有相关的记录
		
		if(!BlankUtils.isBlank(callTaskCounter)) {   				//如果已经存在记录时,直接修改
			
			int count = callTaskCounter.get("COUNT");   //取出当前的数量
			if(type==0) {   		//如果更新的类型为0,即是数量增加1时
				count += 1;   		
			}else {         		//如果更新的类型不为0,即是数量为减1时
				count -= 1;   		
			}
			if(count<0){ count=0; };  //如果小于0时，置为0
			if(updateCounter(taskId, callState, count)>0) {   //修改操作
				b = true;
			}
			
		}else {														//如果不存在记录时,则需要新增一个
			
			int count = 0;
			if(type==0) {  //如果更新的类型为0,即是数量增加1时
				count = 1;
			}
			
			b = addCounter(taskId, callState, count);         //
		}
		
		return b;
	}
	
	/**
	 * 修改计数器
	 * 
	 * @param taskId
	 * @param callState
	 * @param count
	 * @return
	 */
	public int updateCounter(int taskId,String callState,int count) {
		
		String sql = "update call_task_counter set count=? where CT_ID=? and CALL_STATE=?";
		
		return Db.update(sql, count,taskId,callState);
	}
	
	/**
	 * 添加计数器
	 * 
	 * @param taskId
	 * @param callState
	 * @param count
	 * @return
	 */
	public boolean addCounter(int taskId,String callState,int count) {
		
		CallTaskCounter counter = new CallTaskCounter();
		counter.set("CT_ID", taskId);
		counter.set("CALL_STATE",callState);
		counter.set("COUNT",count);
		
		boolean b = counter.save();
		
		return b;
	}
	
	/**
	 * 先检查当前的任务ID及状态，是否已经存在任务计数器记录
	 * 
	 * @param taskId
	 * @param callState
	 * @return
	 */
	public Record checkRecord(int taskId,String callState) {
		
		String sql = "select * from call_task_counter where CT_ID=? and CALL_STATE=?";
		
		Record record = Db.findFirst(sql, taskId,callState);
		
		return record;
	}
	
	
}
